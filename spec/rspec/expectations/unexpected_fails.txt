#have_attributes matcher expect(...).to have_attributes(with_multiple_attributes) fails if target does not responds to any of the attributes
#have_attributes matcher expect(...).to have_attributes(with_multiple_attributes) fails if target responds to the attribute but requires arguments
#have_attributes matcher expect(...).to have_attributes(with_one_attribute) expect(...).to have_attributes(key => matcher) fails with a clear message when the matcher does not match
#have_attributes matcher expect(...).to have_attributes(with_one_attribute) expect(...).to have_attributes(key => matcher) passes when the matchers match
#have_attributes matcher expect(...).to have_attributes(with_one_attribute) expect(...).to have_attributes(key => matcher) provides a description
#have_attributes matcher expect(...).to have_attributes(with_one_attribute) fails if target does not responds to any of the attributes
#have_attributes matcher expect(...).to have_attributes(with_one_attribute) fails if target responds to the attribute but requires arguments
#have_attributes matcher expect(...).to_not have_attributes(with_multiple_attributes) fails if target does not responds to any of the attributes
#have_attributes matcher expect(...).to_not have_attributes(with_multiple_attributes) fails if target responds to the attribute but requires arguments
#have_attributes matcher expect(...).to_not have_attributes(with_one_attribute) fails if target does not responds to any of the attributes
#have_attributes matcher expect(...).to_not have_attributes(with_one_attribute) fails if target responds to the attribute but requires arguments
#include matcher Composing matchers with `include` expect(array).to include(matcher) works with comparison matchers
#include matcher Composing matchers with `include` expect(hash).to include(key => matcher) fails with a clear message when the matcher does not match
#include matcher Composing matchers with `include` expect(hash).to include(key => matcher) provides a description
#include matcher Composing matchers with `include` expect(hash).to include(key_matcher) fails with a clear message when the matcher does not match
#include matcher expect(...).not_to include(:key => value) for a hash target fails if target includes the key/value pair
#include matcher expect(...).not_to include(:key => value) for a hash target fails if target includes the key/value pair among others
#include matcher expect(...).not_to include(:key => value) for a non-hash target fails if the target contains the given hash
#include matcher expect(...).not_to include(expected) for a hash target fails if target includes expected key
#include matcher expect(...).not_to include(expected) for an arbitrary object that responds to `include?` delegates to `include?`
#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes all of the expected keys
#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes some (but not all) of the expected keys
#include matcher expect(...).to include(:key => value) for a hash target fails if target has a different key
#include matcher expect(...).to include(:key => value) for a hash target fails if target has a different value for key
#include matcher expect(...).to include(:key => value) for a non-hash target fails if the target does not contain the given hash
#include matcher expect(...).to include(with, multiple, args) for a hash target fails if target is missing any item as a key
#include matcher expect(...).to include(with_one_arg) for a hash target fails if target does not include expected
#include matcher expect(...).to include(with_one_arg) for a hash target fails if target doesn't have a key and we expect nil
#include matcher expect(...).to include(with_one_arg) for a string target includes a diff when actual is multiline
#include matcher expect(...).to include(with_one_arg) for a string target includes a diff when actual is multiline and there are multiple expecteds
#include matcher expect(...).to include(with_one_arg) for an arbitrary object that responds to `include?` delegates to `include?`
Composing `contain_exactly` with other matchers when it is compared to multiple possible matches works properly when passed as an argument in its aliased form
Composing matchers with `raise_error` expect { }.to raise_error(ErrorClass).with_message(matcher) fails with a clear message when the matcher does not match the raised error
Composing matchers with `raise_error` expect { }.to raise_error(ErrorClass, matcher) fails with a clear message when the matcher does not match the raised error
Composing matchers with `raise_error` expect { }.to raise_error(matcher) fails with a clear message when the matcher does not match the raised error
Composing matchers with `raise_error` expect { }.to raise_error(matcher) provides a description
Matchers should be able to generate their own descriptions expect(...).not_to eql
Matchers should be able to generate their own descriptions expect(...).to be predicate arg1, arg2 and arg3
Matchers should be able to generate their own descriptions expect(...).to have_key
Matchers should be able to generate their own descriptions expect(...).to raise_error with type
Matchers should be able to generate their own descriptions expect(...).to throw symbol
Matchers should be able to generate their own descriptions expect(...).to throw symbol (with named symbol)
RSpec::Expectations behaves like a library that issues no warnings when loaded issues no warnings when loaded
RSpec::Expectations does not allow expectation failures to be caught by a bare rescue
RSpec::Expectations does not include the diff if expected and actual are not diffable
RSpec::Expectations includes a diff if expected and actual are diffable
RSpec::Expectations tells the differ to use color
RSpec::Expectations uses matcher descriptions in place of matchers in diffs
RSpec::Expectations::Configuration configuring rspec-expectations directly behaves like configuring the expectation syntax can limit the syntax to :expect
RSpec::Expectations::Configuration configuring rspec-expectations directly behaves like configuring the expectation syntax can limit the syntax to :should
RSpec::Expectations::Configuration configuring using the rspec-core config API behaves like configuring the expectation syntax can limit the syntax to :expect
RSpec::Expectations::Configuration configuring using the rspec-core config API behaves like configuring the expectation syntax can limit the syntax to :should
RSpec::Expectations::Configuration#backtrace_formatter defaults to a null formatter when rspec-core is not loaded
RSpec::Expectations::Configuration#backtrace_formatter defaults to rspec-core's backtrace formatter when rspec-core is loaded
RSpec::Expectations::ExpectationTarget when constructed via #expect fails an invalid negative expectation
RSpec::Expectations::ExpectationTarget when constructed via #expect fails an invalid negative expectation with a split infinitive
RSpec::Expectations::ExpectationTarget when constructed via #expect fails an invalid positive expectation
RSpec::Expectations::ExpectationTarget when constructed via #expect raises a wrong number of args ArgumentError when given two args
RSpec::Expectations::Syntax when passing a message to an expectation expect(...).not_to prints a warning when the message object isn't a String
RSpec::Expectations::Syntax when passing a message to an expectation expect(...).to prints a warning when the message object isn't a String
RSpec::Matchers
RSpec::Matchers
RSpec::Matchers
RSpec::Matchers
RSpec::Matchers
RSpec::Matchers can be mixed into `main`
RSpec::Matchers once required includes itself in Minitest::Test
RSpec::Matchers should have an alias for "be == 3" with description: "a value == 3"
RSpec::Matchers should have an alias for "be === 3" with description: "a value === 3"
RSpec::Matchers should have an alias for "have attributes {\"age\" => 32}" with description: "an object having attributes {:age => 32}"
RSpec::Matchers should have an alias for "include {\"a\" => 5}" with description: "a hash including {:a => 5}"
RSpec::Matchers should have an alias for "throw foo" with description: "a block throwing :foo"
RSpec::Matchers should have an alias for "throw foo" with description: "throwing :foo"
RSpec::Matchers.define_negated_matcher the failure message for a matcher with default failure messages when failing negatively uses the phrasing from the provided defined matcher alias
RSpec::Matchers.define_negated_matcher the failure message for a matcher with default failure messages when failing positively uses the phrasing from the provided defined matcher alias
RSpec::Matchers.define_negated_matcher when no block is passed when matched negatively fails matches against values that pass the original matcher
RSpec::Matchers.define_negated_matcher when no block is passed when matched positively fails matches against values that pass the original matcher
RSpec::Matchers.define_negated_matcher when the negated description is overriden overrides the description with the provided block
RSpec::Matchers.define_negated_matcher when the negated description is overriden overrides the failure message with the provided block
RSpec::Matchers::AliasedMatcher can get a method object for delegated methods
RSpec::Matchers::BuiltIn::All when single matcher is given expect(...).to all(expected) failure message when the matcher has multi-line failure message returns the index of the failed object
RSpec::Matchers::BuiltIn::All when single matcher is given expect(...).to all(expected) failure message when the matcher has multi-line failure message returns the indexes of all failed objects, not just the first one
RSpec::Matchers::BuiltIn::BaseMatcher default failure message detection for a DSL-defined custom macher that has no failure message overrides indicates that it has default failure messages
RSpec::Matchers::BuiltIn::BaseMatcher default failure message detection for a matcher that subclasses `BaseMatcher` that has no failure message overrides indicates that it has default failure messages
RSpec::Matchers::BuiltIn::BeBetween composing with other matchers (exclusive) behaves like composing with other matchers works with mixed types
RSpec::Matchers::BuiltIn::BeBetween composing with other matchers (inclusive) behaves like composing with other matchers works with mixed types
RSpec::Matchers::BuiltIn::BeBetween expect(...).to be_between(min, max) (exclusive) behaves like be_between works with other Comparable objects
RSpec::Matchers::BuiltIn::BeBetween expect(...).to be_between(min, max) (inclusive) behaves like be_between works with other Comparable objects
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) behaves like handles blocks properly when used with a block matcher forwards on any matcher block arguments as needed (such as for `yield_with_args`) does not support two matchers that both pass arguments to the block
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) when both mathers fail when both matchers have multi-line failure messages fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) when both mathers fail when the first matcher has a multi-line failure message fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) when both mathers fail when the second matcher has a multi-line failure message fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) behaves like handles blocks properly when used with a block matcher forwards on any matcher block arguments as needed (such as for `yield_with_args`) does not support two matchers that both pass arguments to the block
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) when both matchers fail when both matchers have multi-line failure messages fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) when both matchers fail when the first matcher has a multi-line failure message fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) when both matchers fail when the second matcher has a multi-line failure message fails with a well formatted message containing both sub-messages
RSpec::Matchers::BuiltIn::Compound when chaining many matchers together fails with a complete message
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher allows additional matchers to be chained off it using `and`
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher allows additional matchers to be chained off it using `or`
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher can be chained off of an existing matcher using `and`
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher can be chained off of an existing matcher using `or`
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher can be used in a composed matcher expression
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher can match negatively properly
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher does not match an invalid value when using #=== so it can be composed
RSpec::Matchers::BuiltIn::ThrowSymbol behaves like an RSpec matcher matches a valid value when using #=== so it can be composed
RSpec::Matchers::BuiltIn::ThrowSymbol composing with other matchers fails when the matcher does not match the thrown arg
RSpec::Matchers::BuiltIn::ThrowSymbol composing with other matchers passes when the matcher matches the thrown arg
RSpec::Matchers::BuiltIn::ThrowSymbol composing with other matchers provides a description
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg does not match if no arg is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg does not match if nothing is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg does not match if other Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg does not match if wrong arg is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg matches if correct Symbol and args are thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg provides a failure message when no Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg provides a failure message when no arg is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg provides a failure message when wrong Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg provides a failure message when wrong arg is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg provides a negative failure message
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol and an arg raises other errors
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol does not match if correct Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol does not match if no Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol matches if correct Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol matches if correct Symbol is thrown with an arg
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol provides a failure message when no Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol provides a failure message when wrong Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with a symbol provides a negative failure message
RSpec::Matchers::BuiltIn::ThrowSymbol with no args matches if any Symbol is thrown
RSpec::Matchers::BuiltIn::ThrowSymbol with no args matches if any Symbol is thrown with an arg
RSpec::Matchers::BuiltIn::ThrowSymbol with no args provides a negative failure message
RSpec::Matchers::Composable does not blow up when surfacing descriptions from an unreadable IO object
RSpec::Matchers::DSL::Matcher allows an early `return` to be used from a `match_unless_raises` block
RSpec::Matchers::DSL::Matcher allows chainable methods to accept blocks
RSpec::Matchers::DSL::Matcher defined using the dsl can get a method object for methods in the running example
RSpec::Matchers::DSL::Matcher defined using the dsl raises NoMethodError for methods not in the running_example
RSpec::Matchers::DSL::Matcher handles multiline string diffs
RSpec::Matchers::DSL::Matcher with an included module allows multiple modules to be included at once
RSpec::Matchers::DSL::Matcher wrapping another expectation (expect(...).to eq ...) can use the `include` matcher from a `match` block
RSpec::Matchers::DSL::Matcher wrapping another expectation (expect(...).to eq ...) can use the `match` matcher from a `match` block
RSpec::Matchers::DSL::Matcher#match_unless_raises with an assertion with passing assertion passes
RSpec::Matchers::DSL::Matcher#match_unless_raises with an unexpected error raises the error
RSpec::Matchers::DSL::Matcher#match_unless_raises without a specified error class passes if no error is raised
a Matcher with no description provides a helpful message when used in a string-less example block
be_an_instance_of fails when class is higher up hierarchy
built in matchers they all have defined #=== so they can be composable
built in matchers they all have defined #and and #or so they support compound expectations
eq #description with "symbol" is "eq :symbol"
eq #description with {"foo"=>"bar"} is "eq {:foo=>:bar}"
eq Time Equality with DateTime objects fails with identical output when the DateTimes are exactly the same
eq Time Equality with DateTime objects produces different output for DateTimes differing by milliseconds
eq Time Equality with DateTime objects when ActiveSupport is loaded uses a custom format to ensure the output is different when DateTimes differ
eq Time Equality with Time objects produces different output for Times differing by milliseconds
eq with BigDecimal objects fails with a conventional representation of the decimal
equal does not match when !actual.equal?(expected)
equal suggests the `eq` matcher on failure
equal when the expected object is falsey in conditinal semantics describes itself with the expected object
exist matcher behaves like an RSpec matcher allows additional matchers to be chained off it using `and`
exist matcher behaves like an RSpec matcher allows additional matchers to be chained off it using `or`
exist matcher behaves like an RSpec matcher can be chained off of an existing matcher using `and`
exist matcher behaves like an RSpec matcher can be chained off of an existing matcher using `or`
exist matcher behaves like an RSpec matcher can be used in a composed matcher expression
exist matcher behaves like an RSpec matcher can match negatively properly
exist matcher behaves like an RSpec matcher matches a valid value when using #=== so it can be composed
expect { ... }.not_to raise_error with no specific error class fails if anything is raised
expect { ... }.not_to raise_error with no specific error class includes the backtrace of the error that was raised in the error message
expect { ... }.to change(actual, message) with a string passes when actual is modified by the block
expect { ... }.to raise_error(NamedError) fails if another error is raised (NameError)
expect { ... }.to raise_error(NamedError) fails if another error is raised (NameError)
expect { ... }.to raise_error(NamedError, error_message) with Regexp fails if correct error is raised with incorrect message
expect { ... }.to raise_error(NamedError, error_message) with Regexp fails if incorrect error is raised
expect { ... }.to raise_error(NamedError, error_message) with String fails if correct error is raised with incorrect message
expect { ... }.to raise_error(NamedError, error_message) with String fails if incorrect error is raised
expect { ... }.to raise_error(NamedError, error_message) { |err| ... } does NOT yield exception if error message is not matched
expect { ... }.to raise_error(NamedError, error_message) { |err| ... } does not yield exception if error class is not matched
expect { ... }.to raise_error(message) fails if RuntimeError error is raised with the wrong message
expect { ... }.to raise_error(message) fails if any other error is raised with the wrong message
expect { ... }.to raise_error(message) includes the backtrace of any other error in the failure message
expect { ... }.to raise_error.with_message(message) fails if RuntimeError error is raised with the wrong message
expect { ... }.to raise_error.with_message(message) fails if any other error is raised with the wrong message
expect(...).not_to have_sym(*args) fails if #has_sym?(*args) returns true
expect(...).not_to have_sym(*args) includes multiple args in the failure message if multiple args were given to the matcher
expect(...).not_to respond_to(:sym) fails if target responds to :sym
expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with 1 arg
expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with any number of args
expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with one or more args
expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with 2 args
expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with any number args
expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with one or more args
expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with two or more args
expect(...).not_to respond_to(message1, message2) fails if target responds to both message1 and message2
expect(...).not_to respond_to(message1, message2) fails if target responds to message1 but not message2
expect(...).not_to respond_to(message1, message2) fails if target responds to message2 but not message1
expect(...).to be_predicate fails when :predicate? is private
expect(...).to end_with with a hash raises an ArgumentError if trying to match more than one element
expect(...).to end_with with an object that does not respond to :[] fails with a useful message
expect(...).to have_sym(*args) allows composable aliases to be defined
expect(...).to have_sym(*args) fails if #has_sym?(*args) is private
expect(...).to have_sym(*args) fails if #has_sym?(*args) returns false
expect(...).to have_sym(*args) includes multiple args in the failure message if multiple args were given to the matcher
expect(...).to match(expected) provides a diff on failure
expect(...).to respond_to(:sym) fails if target does not respond to :sym
expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 0 args
expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 2 args
expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 2 or more args
expect(...).to respond_to(:sym).with(1).argument fails if target does not respond to :sym
expect(...).to respond_to(:sym).with(1).argument passes if target responds to one or more arguments
expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 0 args
expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 1 args
expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 3 or more args
expect(...).to respond_to(:sym).with(2).arguments fails if target does not respond to :sym
expect(...).to respond_to(:sym).with(2).arguments passes if target responds to any number of arguments
expect(...).to respond_to(:sym).with(2).arguments passes if target responds to two or more arguments
expect(...).to start_with with a hash fails with a useful error if trying to match more than one element
expect(...).to start_with with an object that does not respond to :[] fails with a useful message
expect(actual).not_to be_within(delta).of(expected) fails when actual < (expected + delta)
expect(actual).not_to be_within(delta).of(expected) fails when actual == (expected + delta)
expect(actual).not_to be_within(delta).of(expected) fails when actual == (expected - delta)
expect(actual).not_to be_within(delta).of(expected) fails when actual == expected
expect(actual).not_to be_within(delta).of(expected) fails when actual > (expected - delta)
expect(actual).to be_an_instance_of(expected) fails if actual is instance of subclass of expected class
expect(actual).to be_an_instance_of(expected) provides a description
expect(actual).to be_instance_of(expected) fails if actual is instance of subclass of expected class
expect(actual).to be_instance_of(expected) provides a description
expect(actual).to be_within(delta).of(expected) fails when actual < (expected - delta)
expect(actual).to be_within(delta).of(expected) fails when actual > (expected + delta)
expect(actual).to be_within(delta).of(expected) provides a description
expect(actual).to be_within(delta).percent_of(expected) fails when actual is outside the given percent variance
expect(actual).to be_within(delta).percent_of(expected) provides a description
expect(array).to contain_exactly(*other_array) fails a match of 11 items with duplicates in a reasonable amount of time
operator matchers should == delegates message to target
operator matchers should == works when implemented via method_missing
operator matchers should === delegates message to target
operator matchers should === fails when target.===(actual) returns false
operator matchers should =~ delegates message to target
operator matchers should =~ fails when target.=~(actual) returns false
operator matchers should_not == delegates message to target
operator matchers should_not === delegates message to target
operator matchers should_not === fails when target.===(actual) returns false
operator matchers should_not =~ delegates message to target
operator matchers should_not =~ fails when target.=~(actual) returns false
output.to_stderr matcher does not produce warnings when the failure message is accessed first
output.to_stderr matcher expect { ... }.to output(/regex/).to_stderr fails if the block does not output to stderr
output.to_stderr matcher expect { ... }.to output(/regex/).to_stderr fails if the block outputs a string to stderr that does not match
output.to_stderr matcher expect { ... }.to output(matcher).to_stderr fails if the block outputs a string to stderr that does not pass the given matcher
output.to_stderr matcher expect { ... }.to_not output(/regex/).to_stderr fails if the block outputs a string to stderr that matches the regex
output.to_stderr matcher expect { ... }.to_not output(matcher).to_stderr fails if the block outputs a string to stderr that passes the given matcher
output.to_stdout matcher does not produce warnings when the failure message is accessed first
output.to_stdout matcher expect { ... }.to output(/regex/).to_stdout fails if the block does not output to stdout
output.to_stdout matcher expect { ... }.to output(/regex/).to_stdout fails if the block outputs a string to stdout that does not match
output.to_stdout matcher expect { ... }.to output(matcher).to_stdout fails if the block outputs a string to stdout that does not pass the given matcher
output.to_stdout matcher expect { ... }.to_not output(/regex/).to_stdout fails if the block outputs a string to stdout that matches the regex
output.to_stdout matcher expect { ... }.to_not output(matcher).to_stdout fails if the block outputs a string to stdout that passes the given matcher
should =~ array fails an invalid positive expectation
should =~ array passes a valid positive expectation
should =~ array when the array defines a `=~` method delegates to that method rather than using the contain_exactly matcher
should =~ array when the array defines a `send` method still works
should =~ array when the array undefines `=~` still works
should_not =~ [:with, :multiple, :args] fails when the arrays match
should_not =~ [:with, :multiple, :args] fails when the arrays match in a different order
using contain_exactly with expect passes for an in order valid positive expectation with hashes
using contain_exactly with expect passes for an out of order valid positive expectation with hashes
yield_successive_args matcher behaves like an RSpec matcher can be used in a composed matcher expression
yield_successive_args matcher expect {...}.to yield_successive_args(matcher, matcher) provides a description
yield_successive_args matcher has a description
yield_with_args matcher expect {...}.to yield_with_args(matcher, matcher) provides a description
yield_with_args matcher has a description
-----------Summary-----------
Total passed count: 1510
Expected pending count: 0, actual pending count 0
Total 'failure' count: 266
Unexpected failure count: 265
